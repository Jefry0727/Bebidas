//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entity_tallerBebidasEntities : DbContext
    {
        public Entity_tallerBebidasEntities()
            : base("name=Entity_tallerBebidasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<presentacion> presentacion { get; set; }
        public virtual DbSet<produccion> produccion { get; set; }
        public virtual DbSet<tipo_cerveza> tipo_cerveza { get; set; }
    
        public virtual int borrarPresentacion(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("borrarPresentacion", idParameter);
        }
    
        public virtual int borrarProduccion(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("borrarProduccion", idParameter);
        }
    
        public virtual int borrarTipoCerveza(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("borrarTipoCerveza", idParameter);
        }
    
        public virtual ObjectResult<buscarPresentacion_Result> buscarPresentacion(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscarPresentacion_Result>("buscarPresentacion", nombreParameter);
        }
    
        public virtual ObjectResult<buscarProduccionV2_Result> buscarProduccionV2(string codigo_lote)
        {
            var codigo_loteParameter = codigo_lote != null ?
                new ObjectParameter("codigo_lote", codigo_lote) :
                new ObjectParameter("codigo_lote", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscarProduccionV2_Result>("buscarProduccionV2", codigo_loteParameter);
        }
    
        public virtual ObjectResult<buscarTipoCerveza_Result> buscarTipoCerveza(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscarTipoCerveza_Result>("buscarTipoCerveza", nombreParameter);
        }
    
        public virtual int editarPresentacion(Nullable<int> id, string nombre, Nullable<double> mililitros, Nullable<double> valor_presentacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var mililitrosParameter = mililitros.HasValue ?
                new ObjectParameter("mililitros", mililitros) :
                new ObjectParameter("mililitros", typeof(double));
    
            var valor_presentacionParameter = valor_presentacion.HasValue ?
                new ObjectParameter("valor_presentacion", valor_presentacion) :
                new ObjectParameter("valor_presentacion", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarPresentacion", idParameter, nombreParameter, mililitrosParameter, valor_presentacionParameter);
        }
    
        public virtual int editarProduccion(Nullable<int> id, string codigo_lote, string fecha, string comentarios, Nullable<int> cantidad, Nullable<int> presentacion_id, Nullable<int> tipo_cerveza_id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var codigo_loteParameter = codigo_lote != null ?
                new ObjectParameter("codigo_lote", codigo_lote) :
                new ObjectParameter("codigo_lote", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("comentarios", comentarios) :
                new ObjectParameter("comentarios", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var presentacion_idParameter = presentacion_id.HasValue ?
                new ObjectParameter("presentacion_id", presentacion_id) :
                new ObjectParameter("presentacion_id", typeof(int));
    
            var tipo_cerveza_idParameter = tipo_cerveza_id.HasValue ?
                new ObjectParameter("tipo_cerveza_id", tipo_cerveza_id) :
                new ObjectParameter("tipo_cerveza_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarProduccion", idParameter, codigo_loteParameter, fechaParameter, comentariosParameter, cantidadParameter, presentacion_idParameter, tipo_cerveza_idParameter);
        }
    
        public virtual int editarTipoCerveza(Nullable<int> id, string nombre, string descripcion, Nullable<double> alcohol)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var alcoholParameter = alcohol.HasValue ?
                new ObjectParameter("alcohol", alcohol) :
                new ObjectParameter("alcohol", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarTipoCerveza", idParameter, nombreParameter, descripcionParameter, alcoholParameter);
        }
    
        public virtual int guardarPresentacion(string nombre, Nullable<double> mililitros, Nullable<double> valor_presentacion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var mililitrosParameter = mililitros.HasValue ?
                new ObjectParameter("mililitros", mililitros) :
                new ObjectParameter("mililitros", typeof(double));
    
            var valor_presentacionParameter = valor_presentacion.HasValue ?
                new ObjectParameter("valor_presentacion", valor_presentacion) :
                new ObjectParameter("valor_presentacion", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("guardarPresentacion", nombreParameter, mililitrosParameter, valor_presentacionParameter);
        }
    
        public virtual int guardarProduccion(string codigo_lote, string fecha, string comentarios, Nullable<int> cantidad, Nullable<int> presentacion_id, Nullable<int> tipo_cerveza_id)
        {
            var codigo_loteParameter = codigo_lote != null ?
                new ObjectParameter("codigo_lote", codigo_lote) :
                new ObjectParameter("codigo_lote", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("comentarios", comentarios) :
                new ObjectParameter("comentarios", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var presentacion_idParameter = presentacion_id.HasValue ?
                new ObjectParameter("presentacion_id", presentacion_id) :
                new ObjectParameter("presentacion_id", typeof(int));
    
            var tipo_cerveza_idParameter = tipo_cerveza_id.HasValue ?
                new ObjectParameter("tipo_cerveza_id", tipo_cerveza_id) :
                new ObjectParameter("tipo_cerveza_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("guardarProduccion", codigo_loteParameter, fechaParameter, comentariosParameter, cantidadParameter, presentacion_idParameter, tipo_cerveza_idParameter);
        }
    
        public virtual int guardarTipoCerveza(string nombre, string descripcion, Nullable<double> alcohol)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var alcoholParameter = alcohol.HasValue ?
                new ObjectParameter("alcohol", alcohol) :
                new ObjectParameter("alcohol", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("guardarTipoCerveza", nombreParameter, descripcionParameter, alcoholParameter);
        }
    
        public virtual ObjectResult<listarPresentacion_Result> listarPresentacion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listarPresentacion_Result>("listarPresentacion");
        }
    
        public virtual ObjectResult<listarProduccionV2_Result> listarProduccionV2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listarProduccionV2_Result>("listarProduccionV2");
        }
    
        public virtual ObjectResult<listarTipoCerveza_Result> listarTipoCerveza()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listarTipoCerveza_Result>("listarTipoCerveza");
        }
    }
}
